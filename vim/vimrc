scriptencoding UTF-8
set fencs=ucs-bom,UTF-8,CP932,SJIS

if has("win32")
	so $VIMRUNTIME/mswin.vim
	unmap <C-A>
	unmap! <C-A>
	set cscopeprg=c:/cygwin64/bin/cscope.exe
	set grepprg=findstr\ /N
	set shell=$COMSPEC\ /F:ON
	set shellcmdflag=/c
	set backupdir =~/.cache/backupdir
	set undodir   =~/.cache/undodir
	set directory =~/.cache/swapdir
    let g:w3m#command ='c:/cygwin/bin/w3m.exe'
	set packpath+=L:\cygwin64\home\user\.vim
	nnoremap <Leader>t :<C-u>terminal ++close ++curwin bash
elseif has("win32unix")
	set backupdir =~/.cache/backupdir
	set undodir   =~/.cache/undodir
	set directory =~/.cache/swapdir
    let g:w3m#command ='w3m'
	set mouse=a
	"set grepprg=ufindstr
else
	set backupdir =~/.cache/backupdir
	set undodir   =~/.cache/undodir
	set directory =~/.cache/swapdir
    let g:w3m#command ='w3m'
	set mouse=a
    if executable('ag')
        set grepprg=ag\ --nogroup
        set grepformat=%f:%l:%m
    elseif executable('ack')
        set grepprg=ack\ --nogroup
        set grepformat=%f:%l:%m
    else
        set grepprg=grep\ -Hnd\ skip\ -r
        set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m
    endif
	vnoremap <C-C> "+y
	imap     <C-V> <ESC>"+gpa
	vmap     <C-V> "+gp
    cmap     <C-V> <C-R>+
	vnoremap <C-V> "+p
	noremap  <C-Q> <C-V>
endif

" for terminal
if has('termguicolors')
	set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
endif
set t_Co=256

" common
set cscopequickfix=s-,c-,d-,i-,t-,e-
set cursorline
set nowrap
set ts=4
set sw=4
set expandtab
set smartindent
set hlsearch
set incsearch
set ic
set cscopetag
set listchars=tab:>-
set wildignorecase
set fileignorecase
set matchpairs+=<:>
set showcmd
set undofile
set hidden
set cursorline
let c_space_errors=1
let mapleader = ","
"set fillchars+=stl::
set wildmode=longest:full,full
set ambiwidth=double
set visualbell
set title
set exrc
set nofixeol
set foldlevelstart=99
let g:explVertical=1	" Split vertically
let g:explSplitRight=1	" Put new window to the right of the explorer
let g:explStartRight=0	" Put new explorer window to the left of the current window

if !has('nvim')
	so $VIMRUNTIME/vimrc_example.vim
	set ttymouse=xterm2
	set cryptmethod=blowfish2
endif

map <C-PageUp>	  [cz.
map <C-PageDown>  ]cz.
nnoremap <C-Tab>   gt
nnoremap <S-C-Tab> gT
inoremap <silent> jj <ESC>

nnoremap <Leader>s :<C-u>cs f s <C-R><C-W><CR>
nnoremap <Leader>h :<C-u>QuickhlManualAdd! \<<C-R><C-W>\>
nnoremap <silent> <Leader>H :<C-u>QuickhlManualReset<CR>
nnoremap <C-n> :<C-u>cn<CR>
nnoremap <C-p> :<C-u>cp<CR>
nnoremap <Leader>a :<C-u>e ~/aaa.md<CR>
nnoremap K :e ~/Proj/Topics/<C-R><C-W>.md<CR>

" matchit スクリプトを読み込む
so $VIMRUNTIME/macros/matchit.vim
let loaded_matchit = 1

" cscope
if has("cscope")
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif

" added -d option

" https://qiita.com/takaakikasai/items/3d4f8a4867364a46dfa3
" diffのコマンド
"set diffexpr=MyDiff()
"function MyDiff()
"  let opt = ""
"  if &diffopt =~ "iwhite"
"    let opt = opt . "-b "
"  endif
"  silent execute "!git-diff-normal-format " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
"  redraw!
"endfunction
set diffopt=internal,filler,algorithm:histogram,indent-heuristic

" ruby
" http://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
" この設定にすると遅いのがましになった
set re=1

" aspx整形

function! FormatAspx() range
" %s/>\(<[^\/]\)/>\r\1/g
  let lnum = a:firstline
  while lnum <= a:lastline
    let line = getline(lnum)
    let repl = substitute(line, '>\(<[^\/]\)', '>\n\1', 'g')
    call setline(lnum, repl)
    let lnum = lnum + 1
  endwhile
endf

" ファイル位置を含めてコピーする
function! CopyLocation() range
    let l:ext = expand("%:e")
    if match(['inc', 'def', 'h'], l:ext) >= 0
        let l:ext = 'c'
    elseif 'CMakeLists.txt' == expand('%:t')
        let l:ext = 'cmake'
    endif

    let l:lines = [
	    \ '- ' . @% . ':' . a:firstline,
	    \ '',
	    \ '  ```' . l:ext,
        \]
    for l:line in getline(a:firstline, a:lastline)
        if len(l:line) > 0
            call add(l:lines, '  ' . l:line)
        else
            call add(l:lines, '')
        endif
    endfor
    call add(l:lines, '  ```')
    call add(l:lines, '')
	call setreg("@", l:lines)
endf
map <leader>b :call CopyLocation()<CR>

" Topics
    let g:topicsPath = finddir('Topics', ';')
    let g:topicRoot = g:topicsPath
    if g:topicsPath == ''
        function! Topic()
            echo "Error: Topics folder is not found!"
        endf
        function! OpenMd()
            echo "Error: Topics folder is not found!"
        endf
    else
        let g:topicRoot = g:topicRoot[:-len("/Topics")]
        let &path = &path . "," . g:topicRoot[:-1]

        function! Topic()
            let l:md = trim(system("kp mdnew"))
            let l:title = input("title: ", l:md)
            if l:title != ""
                let l:date = strftime("%y%m%d")
                call mkdir(g:topicsPath . "/" . l:date . "_" . l:title, "p")
                execute "edit " . g:topicsPath . "/" . l:date . "_" . l:title . "/" . l:title . ".md"
                call append(0, ["# " . l:title, ""])
            endif
        endf
        function! GetMdList(ArgLead, CmdLine, CursorPos)
            let l:mds = trim(system("kp mds"))
			let l:mds = split(l:mds, '\n')
            return uniq(l:mds + reverse(filter(map(range(1, bufnr('$')), 'bufname(v:val)'), 'v:val =~ "Topics.*\.md$"')))
        endf

        function! OpenMd()
            let l:title = input("title: ", "", "customlist,GetMdList")
            if l:title != ""
                execute "edit " . l:title
            endif
        endf
        noremap K :exe 'e ' . g:topicsPath . '/' . expand("<cword>") . ".md" <CR>
    endif
    map <leader>p :call Topic()<CR>
    map <leader>m :call OpenMd()<CR>

" vim-plug
    call plug#begin()
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'easymotion/vim-easymotion'
        Plug 'frazrepo/vim-rainbow'
        Plug 'google/vim-codefmt'
        Plug 'google/vim-maktaba'
        Plug 'itchyny/lightline.vim'
        Plug 'junegunn/vim-easy-align'
        Plug 'lambdalisue/fern-git-status.vim'
        Plug 'lambdalisue/fern-hijack.vim'
        Plug 'lambdalisue/fern.vim'
        Plug 'morhetz/gruvbox'
        Plug 'prabirshrestha/vim-lsp'
        Plug 'rafi/awesome-vim-colorschemes'
        Plug 'ryanoasis/vim-devicons'
        Plug 't9md/vim-quickhl'
        Plug 'tpope/vim-fugitive'
        Plug 'zah/nim.vim'
		if !has('nvim')
			Plug 'vim-jp/vimdoc-ja'
		endif
    call plug#end()

" TagList
nnoremap <silent> <F8> :TlistToggle<CR>

" CoffeeTags設定
	if has("win32")
		let g:tagbar_type_coffee = {
			  \ 'ctagsbin' : 'ruby -EUTF-8 c:/cygwin/bin/coffeetags',
			  \ 'ctagsargs' : '',
			  \ 'kinds' : [
			  \ 'f:functions',
			  \ 'o:object',
			  \ ],
			  \ 'sro' : ".",
			  \ 'kind2scope' : {
			  \ 'f' : 'object',
			  \ 'o' : 'object',
			  \ }
			  \ }
	else
		let g:tagbar_type_coffee = {
			  \ 'ctagsbin' : 'coffeetags',
			  \ 'ctagsargs' : '',
			  \ 'kinds' : [
			  \ 'f:functions',
			  \ 'o:object',
			  \ ],
			  \ 'sro' : ".",
			  \ 'kind2scope' : {
			  \ 'f' : 'object',
			  \ 'o' : 'object',
			  \ }
			  \ }
	endif

" csapprox
	"let g:CSApprox_konsole = 1
	"let g:CSApprox_hook_post = ['hi Normal  ctermbg=NONE', 'hi NonText ctermbg=NONE' ]
	let g:CSApprox_attr_map = { 'italic' : 'underline', 'sp' : 'fg' }

" EasyAlign
vmap <Enter> <Plug>(EasyAlign)

" quick highlight
  let g:quickhl_manual_colors = [
        \ "gui=bold ctermfg=7  ctermbg=160 guifg=#222222 guibg=#f44336",
        \ "gui=bold ctermfg=7  ctermbg=166 guifg=#222222 guibg=#E91E63",
        \ "gui=bold ctermfg=16 ctermbg=172 guifg=#222222 guibg=#9C27B0",
        \ "gui=bold ctermfg=16 ctermbg=178 guifg=#222222 guibg=#673AB7",
        \ "gui=bold ctermfg=16 ctermbg=184 guifg=#222222 guibg=#3F51B5",
        \ "gui=bold ctermfg=16 ctermbg=190 guifg=#222222 guibg=#2196F3",
        \ "gui=bold ctermfg=16 ctermbg=220 guifg=#222222 guibg=#00BCD4",
        \ "gui=bold ctermfg=16 ctermbg=214 guifg=#222222 guibg=#009688",
        \ "gui=bold ctermfg=16 ctermbg=208 guifg=#222222 guibg=#4CAF50",
        \ "gui=bold ctermfg=7  ctermbg=202 guifg=#222222 guibg=#8BC34A",
        \ "gui=bold ctermfg=7  ctermbg=196 guifg=#222222 guibg=#CDDC39",
        \ "gui=bold ctermfg=7  ctermbg=161 guifg=#222222 guibg=#FFEB3B",
        \ "gui=bold ctermfg=16 ctermbg=173 guifg=#222222 guibg=#FF9800",
        \ "gui=bold ctermfg=16 ctermbg=179 guifg=#222222 guibg=#FF5722",
        \ "gui=bold ctermfg=16 ctermbg=185 guifg=#222222 guibg=#607D8B",
        \ "gui=bold ctermfg=7  ctermbg=160 guifg=#dddddd guibg=#c62828",
        \ "gui=bold ctermfg=7  ctermbg=166 guifg=#dddddd guibg=#AD1457",
        \ "gui=bold ctermfg=16 ctermbg=172 guifg=#dddddd guibg=#6A1B9A",
        \ "gui=bold ctermfg=16 ctermbg=178 guifg=#dddddd guibg=#4527A0",
        \ "gui=bold ctermfg=16 ctermbg=184 guifg=#dddddd guibg=#283593",
        \ "gui=bold ctermfg=16 ctermbg=190 guifg=#dddddd guibg=#1565C0",
        \ "gui=bold ctermfg=16 ctermbg=220 guifg=#dddddd guibg=#00838F",
        \ "gui=bold ctermfg=16 ctermbg=214 guifg=#dddddd guibg=#00695C",
        \ "gui=bold ctermfg=16 ctermbg=208 guifg=#dddddd guibg=#2E7D32",
        \ "gui=bold ctermfg=7  ctermbg=202 guifg=#dddddd guibg=#558B2F",
        \ "gui=bold ctermfg=7  ctermbg=196 guifg=#dddddd guibg=#9E9D24",
        \ "gui=bold ctermfg=7  ctermbg=161 guifg=#dddddd guibg=#F9A825",
        \ "gui=bold ctermfg=16 ctermbg=173 guifg=#dddddd guibg=#EF6C00",
        \ "gui=bold ctermfg=16 ctermbg=179 guifg=#dddddd guibg=#D84315",
        \ "gui=bold ctermfg=16 ctermbg=185 guifg=#dddddd guibg=#37474F",
        \ "gui=bold ctermfg=7  ctermbg=160 guifg=#000000 guibg=#ef9a9a",
        \ "gui=bold ctermfg=7  ctermbg=166 guifg=#000000 guibg=#F48FB1",
        \ "gui=bold ctermfg=16 ctermbg=172 guifg=#000000 guibg=#CE93D8",
        \ "gui=bold ctermfg=16 ctermbg=178 guifg=#000000 guibg=#B39DDB",
        \ "gui=bold ctermfg=16 ctermbg=184 guifg=#000000 guibg=#9FA8DA",
        \ "gui=bold ctermfg=16 ctermbg=190 guifg=#000000 guibg=#90CAF9",
        \ "gui=bold ctermfg=16 ctermbg=220 guifg=#000000 guibg=#80DEEA",
        \ "gui=bold ctermfg=16 ctermbg=214 guifg=#000000 guibg=#80CBC4",
        \ "gui=bold ctermfg=16 ctermbg=208 guifg=#000000 guibg=#A5D6A7",
        \ "gui=bold ctermfg=7  ctermbg=202 guifg=#000000 guibg=#C5E1A5",
        \ "gui=bold ctermfg=7  ctermbg=196 guifg=#000000 guibg=#E6EE9C",
        \ "gui=bold ctermfg=7  ctermbg=161 guifg=#000000 guibg=#FFF59D",
        \ "gui=bold ctermfg=16 ctermbg=173 guifg=#000000 guibg=#FFCC80",
        \ "gui=bold ctermfg=16 ctermbg=179 guifg=#000000 guibg=#FFAB91",
        \ "gui=bold ctermfg=16 ctermbg=185 guifg=#000000 guibg=#B0BEC5",
        \ "gui=bold ctermfg=7  ctermbg=160 guifg=#bbbbbb guibg=#b71c1c",
        \ "gui=bold ctermfg=7  ctermbg=166 guifg=#bbbbbb guibg=#880E4F",
        \ "gui=bold ctermfg=16 ctermbg=172 guifg=#bbbbbb guibg=#4A148C",
        \ "gui=bold ctermfg=16 ctermbg=178 guifg=#bbbbbb guibg=#311B92",
        \ "gui=bold ctermfg=16 ctermbg=184 guifg=#bbbbbb guibg=#1A237E",
        \ "gui=bold ctermfg=16 ctermbg=190 guifg=#bbbbbb guibg=#0D47A1",
        \ "gui=bold ctermfg=16 ctermbg=220 guifg=#bbbbbb guibg=#01579B",
        \ "gui=bold ctermfg=16 ctermbg=214 guifg=#bbbbbb guibg=#006064",
        \ "gui=bold ctermfg=16 ctermbg=208 guifg=#bbbbbb guibg=#004D40",
        \ "gui=bold ctermfg=7  ctermbg=202 guifg=#bbbbbb guibg=#1B5E20",
        \ "gui=bold ctermfg=7  ctermbg=196 guifg=#bbbbbb guibg=#33691E",
        \ "gui=bold ctermfg=7  ctermbg=161 guifg=#bbbbbb guibg=#827717",
        \ "gui=bold ctermfg=16 ctermbg=173 guifg=#bbbbbb guibg=#F57F17",
        \ "gui=bold ctermfg=16 ctermbg=185 guifg=#bbbbbb guibg=#E65100",
        \ "gui=bold ctermfg=7  ctermbg=160 guifg=#bbbbbb guibg=#BF360C",
        \ "gui=bold ctermfg=7  ctermbg=166 guifg=#bbbbbb guibg=#263238",
        \ ]

" rainbow
    let g:rainbow_active = 1
    let g:rainbow_conf = {'guifgs': [ '#1abc9c', '#e67e22', '#2ecc71', '#f1c40f', '#3498db', '#e74c3c', '#9b59b6']}

" lightline
  set laststatus=2
  let g:lightline = {
    \ 'colorscheme': 'gruvbox',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'filename' ]],
    \   'right': [ [ 'lineinfo' ], ['percent'], [ 'fileencoding' ] ]
    \ },
    \ 'component_function': {
	\   'fugitive': 'LightlineFugitive',
    \   'readonly': 'LightlineReadonly',
    \   'filetype': 'MyFiletype',
    \   'fileformat': 'MyFileformat',
    \   'filename': 'LightlineFilename',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \ },
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '', 'right': '' }
    \ }

  function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol(): 'no ft') : ''
  endfunction
  
  function! MyFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()): ''
  endfunction

  function! LightlineModified()
	return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
	return &ft !~? 'help' && &readonly ? '' : ''
  endfunction

  function! LightlineFilename()
	let fname = expand('%:t')
	return fname == '__Tagbar__' ? g:lightline.fname :
		  \ fname =~ '__Gundo\|NERD_tree' ? '' :
		  \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		  \ ('' != fname ? fname : '[No Name]') .
		  \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFileencoding()
	return winwidth(0) > 70 ? ((&fenc !=# '' ? &fenc : &enc) . WebDevIconsGetFileFormatSymbol()) . ' ' : ''
  endfunction

  function! LightlineMode()
	let fname = expand('%:t')
	return fname == '__Tagbar__' ? 'Tagbar' :
		  \ fname == '__Gundo__' ? 'Gundo' :
		  \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
		  \ fname =~ 'NERD_tree' ? 'NERDTree' :
		  \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! LightlineFugitive()
  	if exists('*FugitiveHead')
  		let branch = FugitiveHead()
  		return branch !=# '' ? ''.branch : ''
  	endif
  	return ''
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
	  let g:lightline.fname = a:fname
	return lightline#statusline(0)
  endfunction

" editorconfig
	let g:editorconfig_blacklist = {
	    \ 'filetype': ['git.*', 'fugitive'],
	    \ 'pattern': ['\.un~$']}

" devicons
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 1

" markdown
  " https://github.com/tpope/vim-markdown
    let g:markdown_fenced_languages = ['c', 'cpp', 'make', 'cmake', 'html', 'python', 'bash=sh']
    let g:markdown_minlines = 500
    let g:markdown_folding = 1

" lsp
	let g:lsp_diagnostics_enabled = 0
	if (executable('clangd'))
	    au User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'allowlist': ['c', 'cpp', 'inc', 'objc', 'objcpp'],
            \ })
    endif

    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes
        if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
        nmap <buffer> gd <plug>(lsp-definition)
        nmap <buffer> gs <plug>(lsp-document-symbol-search)
        nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
        nmap <buffer> gr <plug>(lsp-references)
        nmap <buffer> gi <plug>(lsp-implementation)
        nmap <buffer> gp <plug>(lsp-type-definition)
        nmap <buffer> <leader>rn <plug>(lsp-rename)
        nmap <buffer> [g <plug>(lsp-previous-diagnostic)
        nmap <buffer> ]g <plug>(lsp-next-diagnostic)
        nmap <buffer> H <plug>(lsp-hover)
        inoremap <buffer> <expr><c-f> lsp#scroll(+4)
        inoremap <buffer> <expr><c-b> lsp#scroll(-4)

        let g:lsp_format_sync_timeout = 1000
        autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
        
        " refer to doc to add more commands
    endfunction

    augroup lsp_install
        au!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END

" ctrl-p
    let g:ctrlp_map = '<c-e>'

" easymotion
    nmap <Leader>e <Plug>(easymotion-overwin-f)

" fern
    nmap <Leader>. <Plug>(fern-action-hidden)

" codefmt
    augroup autoformat_settings
      autocmd FileType bzl AutoFormatBuffer buildifier
      autocmd FileType c,cpp,proto,javascript,arduino AutoFormatBuffer clang-format
      autocmd FileType dart AutoFormatBuffer dartfmt
      autocmd FileType go AutoFormatBuffer gofmt
      autocmd FileType gn AutoFormatBuffer gn
      autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
      autocmd FileType java AutoFormatBuffer google-java-format
      autocmd FileType python AutoFormatBuffer yapf
      autocmd FileType rust AutoFormatBuffer rustfmt
      autocmd FileType vue AutoFormatBuffer prettier
    augroup END

" quickrun
    nmap <Leader>q <Plug>(quickrun)

" gruvbox
    " https://github.com/lifepillar/vim-gruvbox8/blob/master/colors/gruvbox8.vim
    let g:terminal_ansi_colors = ['#282828', '#cc241d', '#98971a', '#d79921', '#458588', '#b16286', '#689d6a', '#a89984', '#928374', '#fb4934', '#b8bb26', '#fabd2f', '#83a598', '#d3869b', '#8ec07c', '#ebdbb2']
    set background=dark
    colo gruvbox

" When using `dd` in the quickfix list, remove the item from the quickfix list.
function! RemoveQFItem()
  let curqfidx = line('.') - 1
  let qfall = getqflist()
  call remove(qfall, curqfidx)
  call setqflist(qfall, 'r')
  execute curqfidx + 1 . "cfirst"
  :copen
endfunction
:command! RemoveQFItem :call RemoveQFItem()
" Use map <buffer> to only map dd in the quickfix window. Requires +localmap
autocmd FileType qf map <buffer> dd :RemoveQFItem<cr>

au VimEnter * if filereadable("init.vim") | source init.vim | endif

au FileType c          setlocal sw=2 ts=2 et
au FileType cpp        setlocal sw=2 ts=2 et
au FileType cs         setlocal sw=4 ts=4 et
au FileType cuda       setlocal sw=2 ts=2 et
au FileType html       setlocal sw=2 ts=2 et
au FileType javascript setlocal sw=2 ts=2 et
au FileType json       setlocal sw=2 ts=2 et
au FileType markdown   setlocal sw=2 ts=2 et
au FileType ruby       setlocal sw=2 ts=2 et
au FileType sh         setlocal sw=2 ts=2 et
au FileType typescript setlocal sw=2 ts=2 et
